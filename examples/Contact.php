<?php namespace Validators;
// AUTOGENERATED BY laravel-validator FROM validators/contact.js, PLEASE, DON'T MODIFY IT

use App;
use Input;
use Log;
use Str;

class Contact {

  public static function validate() {
    return self::validateData(Input::all());
  }

  public static function error($data, $msg) {
    $bt = debug_backtrace();
    $caller = array_shift($bt);
    Log::error($msg);
    Log::debug($caller['file'] . '::' . $caller['line']);
    Log::debug(var_export($data, TRUE));
    App::abort(403, 'validator error: ' . $msg);
  }

  public static function validateData($data) {
    $valid = array();
    $store = array();

    if (!is_array($data)) {
      self::error($data, 'root is not an array');
    }

    if (!isset($data['name'])) {
      $data['name'] = null;
    }

    $value = $data['name'];
    if (is_null($value)) {
      $value = '';
    }
    if (is_int($value) || is_float($value)) {
      $value = strval($value);
    }
    if (!is_string($value)) {
      self::error($data, 'key ' . 'name' . ' is not a string');
    }

    if (Str::length($value) === 0) {
      self::error($data, 'key ' . 'name' . ' breaks the required validation');
    }

    if (Str::length($value) > 0 && Str::length($value) < 3) {
      self::error($data, 'key ' . 'name' . ' breaks the minlength validation');
    }

    if (Str::length($value) > 10) {
      self::error($data, 'key ' . 'name' . ' breaks the maxlength validation');
    }

    $valid['name'] = $value;

    if (!isset($data['email'])) {
      $data['email'] = null;
    }

    $value = $data['email'];
    if (is_null($value)) {
      $value = '';
    }
    if (is_int($value) || is_float($value)) {
      $value = strval($value);
    }
    if (!is_string($value)) {
      self::error($data, 'key ' . 'email' . ' is not a string');
    }

    if (Str::length($value) === 0) {
      self::error($data, 'key ' . 'email' . ' breaks the required validation');
    }

    if (Str::length($value) > 0 && !preg_match('/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}$/', $value)) {
      self::error($data, 'key ' . 'email' . ' breaks the email validation');
    }

    $valid['email'] = $value;

    if (!isset($data['url'])) {
      $data['url'] = null;
    }

    $value = $data['url'];
    if (is_null($value)) {
      $value = '';
    }
    if (is_int($value) || is_float($value)) {
      $value = strval($value);
    }
    if (!is_string($value)) {
      self::error($data, 'key ' . 'url' . ' is not a string');
    }

    if (Str::length($value) === 0) {
      self::error($data, 'key ' . 'url' . ' breaks the required validation');
    }

    if (Str::length($value) > 0 && !preg_match('/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/', $value)) {
      self::error($data, 'key ' . 'url' . ' breaks the url validation');
    }

    $valid['url'] = $value;

    if (!isset($data['message'])) {
      $data['message'] = null;
    }

    $value = $data['message'];
    if (is_null($value)) {
      $value = '';
    }
    if (is_int($value) || is_float($value)) {
      $value = strval($value);
    }
    if (!is_string($value)) {
      self::error($data, 'key ' . 'message' . ' is not a string');
    }

    if (Str::length($value) === 0) {
      self::error($data, 'key ' . 'message' . ' breaks the required validation');
    }

    if (Str::length($value) > 0 && Str::length($value) < 10) {
      self::error($data, 'key ' . 'message' . ' breaks the minlength validation');
    }

    if (Str::length($value) > 500) {
      self::error($data, 'key ' . 'message' . ' breaks the maxlength validation');
    }

    $valid['message'] = $value;

    return $valid;
  }

}
