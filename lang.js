/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lang = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Validator":3,"Rules":4,"EOF":5,"Rule":6,"Object":7,"Array":8,"Conditional":9,"Switch":10,"String":11,"Integer":12,"Boolean":13,"OBJECT":14,"NAME":15,"OPEN_BRACE":16,"CLOSE_BRACE":17,"ARRAY":18,"ArrayDescription":19,"MINCOUNT":20,"IfCondition":21,"IF_PART":22,"SWITCH":23,"CaseBlocks":24,"CaseBlock":25,"CaseCondition":26,"CASE_PART":27,"STRING":28,"Requirements":29,"INTEGER":30,"BOOLEAN":31,"RequirementList":32,"Requirement":33,"OPEN_PAREN":34,"RequirementArguments":35,"CLOSE_PAREN":36,"COMMA":37,"NUMBER":38,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"OBJECT",15:"NAME",16:"OPEN_BRACE",17:"CLOSE_BRACE",18:"ARRAY",20:"MINCOUNT",22:"IF_PART",23:"SWITCH",27:"CASE_PART",28:"STRING",30:"INTEGER",31:"BOOLEAN",34:"OPEN_PAREN",36:"CLOSE_PAREN",37:"COMMA",38:"NUMBER"},
productions_: [0,[3,2],[4,2],[4,0],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,4],[8,5],[8,4],[19,1],[19,2],[9,4],[21,1],[21,2],[10,4],[24,0],[24,2],[25,4],[26,1],[26,2],[11,3],[12,3],[13,3],[29,0],[29,3],[32,0],[32,2],[33,1],[33,4],[35,0],[35,1],[35,3],[35,1],[35,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new Validator($$[$0-1]); 
break;
case 2: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 3: this.$ = []; 
break;
case 11: this.$ = new VObject($$[$0-3], $$[$0-1]); 
break;
case 12: this.$ = new VObject('', $$[$0-1]); 
break;
case 13: this.$ = new VArray($$[$0-3], $$[$0-1][0], $$[$0-1][1]); 
break;
case 14: this.$ = new VArray('', $$[$0-1][0], $$[$0-1][1]); 
break;
case 15: this.$ = [0, $$[$0]]; 
break;
case 16: this.$ = [Number($$[$0-1]), $$[$0]]; 
break;
case 17: this.$ = new VConditional($$[$0-3].join(''), $$[$0-1]); 
break;
case 18: this.$ = [$$[$0]]; 
break;
case 19: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 20: this.$ = new VSwitch($$[$0-1]); 
break;
case 21: this.$ = []; 
break;
case 22: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 23: this.$ = new VCase($$[$0-3].join(''), $$[$0-1]); 
break;
case 24: this.$ = [$$[$0]]; 
break;
case 25: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 26: this.$ = new VString($$[$0-1], $$[$0]); 
break;
case 27: this.$ = new VInteger($$[$0-1], $$[$0]); 
break;
case 28: this.$ = new VBoolean($$[$0-1], $$[$0]); 
break;
case 29: this.$ = []; 
break;
case 30: this.$ = $$[$0-1]; 
break;
case 31: this.$ = []; 
break;
case 32: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 33: this.$ = new VRequirement($$[$0], []); 
break;
case 34: this.$ = new VRequirement($$[$0-3], $$[$0-1]); 
break;
case 35: this.$ = []; 
break;
case 36: this.$ = [$$[$0]]; 
break;
case 37: this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 38: this.$ = [$$[$0]]; 
break;
case 39: this.$ = [$$[$0-2]].concat($$[$0]); 
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],18:[1,12],21:13,22:[1,18],23:[1,14],28:[1,15],30:[1,16],31:[1,17]},{1:[3]},{5:[1,19]},{4:20,5:[2,3],6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],17:[2,3],18:[1,12],21:13,22:[1,18],23:[1,14],28:[1,15],30:[1,16],31:[1,17]},{5:[2,4],14:[2,4],17:[2,4],18:[2,4],22:[2,4],23:[2,4],28:[2,4],30:[2,4],31:[2,4]},{5:[2,5],14:[2,5],17:[2,5],18:[2,5],22:[2,5],23:[2,5],28:[2,5],30:[2,5],31:[2,5]},{5:[2,6],14:[2,6],17:[2,6],18:[2,6],22:[2,6],23:[2,6],28:[2,6],30:[2,6],31:[2,6]},{5:[2,7],14:[2,7],17:[2,7],18:[2,7],22:[2,7],23:[2,7],28:[2,7],30:[2,7],31:[2,7]},{5:[2,8],14:[2,8],17:[2,8],18:[2,8],22:[2,8],23:[2,8],28:[2,8],30:[2,8],31:[2,8]},{5:[2,9],14:[2,9],17:[2,9],18:[2,9],22:[2,9],23:[2,9],28:[2,9],30:[2,9],31:[2,9]},{5:[2,10],14:[2,10],17:[2,10],18:[2,10],22:[2,10],23:[2,10],28:[2,10],30:[2,10],31:[2,10]},{15:[1,21],16:[1,22]},{15:[1,23],16:[1,24]},{16:[1,25]},{16:[1,26]},{15:[1,27]},{15:[1,28]},{15:[1,29]},{16:[2,18],21:30,22:[1,18]},{1:[2,1]},{5:[2,2],17:[2,2]},{16:[1,31]},{4:32,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],17:[2,3],18:[1,12],21:13,22:[1,18],23:[1,14],28:[1,15],30:[1,16],31:[1,17]},{16:[1,33]},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],18:[1,12],19:34,20:[1,36],21:13,22:[1,18],23:[1,14],28:[1,15],30:[1,16],31:[1,17]},{4:37,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],17:[2,3],18:[1,12],21:13,22:[1,18],23:[1,14],28:[1,15],30:[1,16],31:[1,17]},{17:[2,21],24:38,25:39,26:40,27:[1,41]},{5:[2,29],14:[2,29],16:[1,43],17:[2,29],18:[2,29],22:[2,29],23:[2,29],28:[2,29],29:42,30:[2,29],31:[2,29]},{5:[2,29],14:[2,29],16:[1,43],17:[2,29],18:[2,29],22:[2,29],23:[2,29],28:[2,29],29:44,30:[2,29],31:[2,29]},{5:[2,29],14:[2,29],16:[1,43],17:[2,29],18:[2,29],22:[2,29],23:[2,29],28:[2,29],29:45,30:[2,29],31:[2,29]},{16:[2,19]},{4:46,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],17:[2,3],18:[1,12],21:13,22:[1,18],23:[1,14],28:[1,15],30:[1,16],31:[1,17]},{17:[1,47]},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],18:[1,12],19:48,20:[1,36],21:13,22:[1,18],23:[1,14],28:[1,15],30:[1,16],31:[1,17]},{17:[1,49]},{17:[2,15]},{6:50,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],18:[1,12],21:13,22:[1,18],23:[1,14],28:[1,15],30:[1,16],31:[1,17]},{17:[1,51]},{17:[1,52]},{17:[2,21],24:53,25:39,26:40,27:[1,41]},{16:[1,54]},{16:[2,24],26:55,27:[1,41]},{5:[2,26],14:[2,26],17:[2,26],18:[2,26],22:[2,26],23:[2,26],28:[2,26],30:[2,26],31:[2,26]},{15:[1,58],17:[2,31],32:56,33:57},{5:[2,27],14:[2,27],17:[2,27],18:[2,27],22:[2,27],23:[2,27],28:[2,27],30:[2,27],31:[2,27]},{5:[2,28],14:[2,28],17:[2,28],18:[2,28],22:[2,28],23:[2,28],28:[2,28],30:[2,28],31:[2,28]},{17:[1,59]},{5:[2,12],14:[2,12],17:[2,12],18:[2,12],22:[2,12],23:[2,12],28:[2,12],30:[2,12],31:[2,12]},{17:[1,60]},{5:[2,14],14:[2,14],17:[2,14],18:[2,14],22:[2,14],23:[2,14],28:[2,14],30:[2,14],31:[2,14]},{17:[2,16]},{5:[2,17],14:[2,17],17:[2,17],18:[2,17],22:[2,17],23:[2,17],28:[2,17],30:[2,17],31:[2,17]},{5:[2,20],14:[2,20],17:[2,20],18:[2,20],22:[2,20],23:[2,20],28:[2,20],30:[2,20],31:[2,20]},{17:[2,22]},{4:61,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],17:[2,3],18:[1,12],21:13,22:[1,18],23:[1,14],28:[1,15],30:[1,16],31:[1,17]},{16:[2,25]},{17:[1,62]},{15:[1,58],17:[2,31],32:63,33:57},{15:[2,33],17:[2,33],34:[1,64]},{5:[2,11],14:[2,11],17:[2,11],18:[2,11],22:[2,11],23:[2,11],28:[2,11],30:[2,11],31:[2,11]},{5:[2,13],14:[2,13],17:[2,13],18:[2,13],22:[2,13],23:[2,13],28:[2,13],30:[2,13],31:[2,13]},{17:[1,65]},{5:[2,30],14:[2,30],17:[2,30],18:[2,30],22:[2,30],23:[2,30],28:[2,30],30:[2,30],31:[2,30]},{17:[2,32]},{28:[1,67],35:66,36:[2,35],38:[1,68]},{17:[2,23],27:[2,23]},{36:[1,69]},{36:[2,36],37:[1,70]},{36:[2,38],37:[1,71]},{15:[2,34],17:[2,34]},{28:[1,67],35:72,36:[2,35],38:[1,68]},{28:[1,67],35:73,36:[2,35],38:[1,68]},{36:[2,37]},{36:[2,39]}],
defaultActions: {19:[2,1],30:[2,19],35:[2,15],50:[2,16],53:[2,22],55:[2,25],63:[2,32],72:[2,37],73:[2,39]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  function Validator(rules) {
    this.type = 'object';
    this.name = 'root';
    this.rules = rules;
  }

  function VObject(name, rules) {
    this.type = 'object';
    this.name = name;
    this.rules = rules;
  }

  function VString(name, requirements) {
    this.type = 'string';
    this.name = name;
    this.requirements = requirements;
  }

  function VInteger(name, requirements) {
    this.type = 'integer';
    this.name = name;
    this.requirements = requirements;
  }

  function VBoolean(name, requirements) {
    this.type = 'boolean';
    this.name = name;
    this.requirements = requirements;
  }

  function VArray(name, mincount, fields) {
    this.type = 'array';
    this.name = name;
    this.mincount = mincount;
    this.fields = fields;
  }

  function VRequirement(name, arguments) {
    this.name = name;
    this.arguments = arguments;
  }

  function VConditional(condition, rules) {
    this.type = 'conditional';
    this.condition = condition;
    this.rules = rules;
  }

  function VSwitch(cases) {
    this.type = 'switch';
    this.cases = cases;
  }

  function VCase(condition, rules) {
    this.type = 'case';
    this.condition = condition;
    this.rules = rules;
  }


function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lang;
exports.Parser = lang.Parser;
exports.parse = function () { return lang.parse.apply(lang, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}