/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lang = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Validator":3,"Rules":4,"EOF":5,"Rule":6,"Object":7,"Array":8,"Conditional":9,"Switch":10,"String":11,"Integer":12,"Boolean":13,"Float":14,"OBJECT":15,"NAME":16,"OPEN_BRACE":17,"CLOSE_BRACE":18,"ARRAY":19,"ArrayDescription":20,"MINCOUNT":21,"IfCondition":22,"IF_PART":23,"SWITCH":24,"CaseBlocks":25,"CaseBlock":26,"CaseCondition":27,"CASE_PART":28,"STRING":29,"Requirements":30,"INTEGER":31,"BOOLEAN":32,"FLOAT":33,"RequirementList":34,"Requirement":35,"OPEN_PAREN":36,"RequirementArguments":37,"CLOSE_PAREN":38,"COMMA":39,"NUMBER":40,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"OBJECT",16:"NAME",17:"OPEN_BRACE",18:"CLOSE_BRACE",19:"ARRAY",21:"MINCOUNT",23:"IF_PART",24:"SWITCH",28:"CASE_PART",29:"STRING",31:"INTEGER",32:"BOOLEAN",33:"FLOAT",36:"OPEN_PAREN",38:"CLOSE_PAREN",39:"COMMA",40:"NUMBER"},
productions_: [0,[3,2],[4,2],[4,0],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,4],[8,5],[8,4],[20,1],[20,2],[9,4],[22,1],[22,2],[10,4],[25,0],[25,2],[26,4],[27,1],[27,2],[11,3],[12,3],[13,3],[14,3],[30,0],[30,3],[34,0],[34,2],[35,1],[35,4],[37,0],[37,1],[37,3],[37,1],[37,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new Validator($$[$0-1]); 
break;
case 2: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 3: this.$ = []; 
break;
case 12: this.$ = new VObject($$[$0-3], $$[$0-1]); 
break;
case 13: this.$ = new VObject('', $$[$0-1]); 
break;
case 14: this.$ = new VArray($$[$0-3], $$[$0-1][0], $$[$0-1][1]); 
break;
case 15: this.$ = new VArray('', $$[$0-1][0], $$[$0-1][1]); 
break;
case 16: this.$ = [0, $$[$0]]; 
break;
case 17: this.$ = [Number($$[$0-1]), $$[$0]]; 
break;
case 18: this.$ = new VConditional($$[$0-3].join(''), $$[$0-1]); 
break;
case 19: this.$ = [$$[$0]]; 
break;
case 20: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 21: this.$ = new VSwitch($$[$0-1]); 
break;
case 22: this.$ = []; 
break;
case 23: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 24: this.$ = new VCase($$[$0-3].join(''), $$[$0-1]); 
break;
case 25: this.$ = [$$[$0]]; 
break;
case 26: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 27: this.$ = new VString($$[$0-1], $$[$0]); 
break;
case 28: this.$ = new VInteger($$[$0-1], $$[$0]); 
break;
case 29: this.$ = new VBoolean($$[$0-1], $$[$0]); 
break;
case 30: this.$ = new VFloat($$[$0-1], $$[$0]); 
break;
case 31: this.$ = []; 
break;
case 32: this.$ = $$[$0-1]; 
break;
case 33: this.$ = []; 
break;
case 34: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 35: this.$ = new VRequirement($$[$0], []); 
break;
case 36: this.$ = new VRequirement($$[$0-3], $$[$0-1]); 
break;
case 37: this.$ = []; 
break;
case 38: this.$ = [$$[$0]]; 
break;
case 39: this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 40: this.$ = [$$[$0]]; 
break;
case 41: this.$ = [$$[$0-2]].concat($$[$0]); 
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:[1,12],19:[1,13],22:14,23:[1,20],24:[1,15],29:[1,16],31:[1,17],32:[1,18],33:[1,19]},{1:[3]},{5:[1,21]},{4:22,5:[2,3],6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:[1,12],18:[2,3],19:[1,13],22:14,23:[1,20],24:[1,15],29:[1,16],31:[1,17],32:[1,18],33:[1,19]},{5:[2,4],15:[2,4],18:[2,4],19:[2,4],23:[2,4],24:[2,4],29:[2,4],31:[2,4],32:[2,4],33:[2,4]},{5:[2,5],15:[2,5],18:[2,5],19:[2,5],23:[2,5],24:[2,5],29:[2,5],31:[2,5],32:[2,5],33:[2,5]},{5:[2,6],15:[2,6],18:[2,6],19:[2,6],23:[2,6],24:[2,6],29:[2,6],31:[2,6],32:[2,6],33:[2,6]},{5:[2,7],15:[2,7],18:[2,7],19:[2,7],23:[2,7],24:[2,7],29:[2,7],31:[2,7],32:[2,7],33:[2,7]},{5:[2,8],15:[2,8],18:[2,8],19:[2,8],23:[2,8],24:[2,8],29:[2,8],31:[2,8],32:[2,8],33:[2,8]},{5:[2,9],15:[2,9],18:[2,9],19:[2,9],23:[2,9],24:[2,9],29:[2,9],31:[2,9],32:[2,9],33:[2,9]},{5:[2,10],15:[2,10],18:[2,10],19:[2,10],23:[2,10],24:[2,10],29:[2,10],31:[2,10],32:[2,10],33:[2,10]},{5:[2,11],15:[2,11],18:[2,11],19:[2,11],23:[2,11],24:[2,11],29:[2,11],31:[2,11],32:[2,11],33:[2,11]},{16:[1,23],17:[1,24]},{16:[1,25],17:[1,26]},{17:[1,27]},{17:[1,28]},{16:[1,29]},{16:[1,30]},{16:[1,31]},{16:[1,32]},{17:[2,19],22:33,23:[1,20]},{1:[2,1]},{5:[2,2],18:[2,2]},{17:[1,34]},{4:35,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:[1,12],18:[2,3],19:[1,13],22:14,23:[1,20],24:[1,15],29:[1,16],31:[1,17],32:[1,18],33:[1,19]},{17:[1,36]},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:[1,12],19:[1,13],20:37,21:[1,39],22:14,23:[1,20],24:[1,15],29:[1,16],31:[1,17],32:[1,18],33:[1,19]},{4:40,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:[1,12],18:[2,3],19:[1,13],22:14,23:[1,20],24:[1,15],29:[1,16],31:[1,17],32:[1,18],33:[1,19]},{18:[2,22],25:41,26:42,27:43,28:[1,44]},{5:[2,31],15:[2,31],17:[1,46],18:[2,31],19:[2,31],23:[2,31],24:[2,31],29:[2,31],30:45,31:[2,31],32:[2,31],33:[2,31]},{5:[2,31],15:[2,31],17:[1,46],18:[2,31],19:[2,31],23:[2,31],24:[2,31],29:[2,31],30:47,31:[2,31],32:[2,31],33:[2,31]},{5:[2,31],15:[2,31],17:[1,46],18:[2,31],19:[2,31],23:[2,31],24:[2,31],29:[2,31],30:48,31:[2,31],32:[2,31],33:[2,31]},{5:[2,31],15:[2,31],17:[1,46],18:[2,31],19:[2,31],23:[2,31],24:[2,31],29:[2,31],30:49,31:[2,31],32:[2,31],33:[2,31]},{17:[2,20]},{4:50,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:[1,12],18:[2,3],19:[1,13],22:14,23:[1,20],24:[1,15],29:[1,16],31:[1,17],32:[1,18],33:[1,19]},{18:[1,51]},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:[1,12],19:[1,13],20:52,21:[1,39],22:14,23:[1,20],24:[1,15],29:[1,16],31:[1,17],32:[1,18],33:[1,19]},{18:[1,53]},{18:[2,16]},{6:54,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:[1,12],19:[1,13],22:14,23:[1,20],24:[1,15],29:[1,16],31:[1,17],32:[1,18],33:[1,19]},{18:[1,55]},{18:[1,56]},{18:[2,22],25:57,26:42,27:43,28:[1,44]},{17:[1,58]},{17:[2,25],27:59,28:[1,44]},{5:[2,27],15:[2,27],18:[2,27],19:[2,27],23:[2,27],24:[2,27],29:[2,27],31:[2,27],32:[2,27],33:[2,27]},{16:[1,62],18:[2,33],34:60,35:61},{5:[2,28],15:[2,28],18:[2,28],19:[2,28],23:[2,28],24:[2,28],29:[2,28],31:[2,28],32:[2,28],33:[2,28]},{5:[2,29],15:[2,29],18:[2,29],19:[2,29],23:[2,29],24:[2,29],29:[2,29],31:[2,29],32:[2,29],33:[2,29]},{5:[2,30],15:[2,30],18:[2,30],19:[2,30],23:[2,30],24:[2,30],29:[2,30],31:[2,30],32:[2,30],33:[2,30]},{18:[1,63]},{5:[2,13],15:[2,13],18:[2,13],19:[2,13],23:[2,13],24:[2,13],29:[2,13],31:[2,13],32:[2,13],33:[2,13]},{18:[1,64]},{5:[2,15],15:[2,15],18:[2,15],19:[2,15],23:[2,15],24:[2,15],29:[2,15],31:[2,15],32:[2,15],33:[2,15]},{18:[2,17]},{5:[2,18],15:[2,18],18:[2,18],19:[2,18],23:[2,18],24:[2,18],29:[2,18],31:[2,18],32:[2,18],33:[2,18]},{5:[2,21],15:[2,21],18:[2,21],19:[2,21],23:[2,21],24:[2,21],29:[2,21],31:[2,21],32:[2,21],33:[2,21]},{18:[2,23]},{4:65,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:[1,12],18:[2,3],19:[1,13],22:14,23:[1,20],24:[1,15],29:[1,16],31:[1,17],32:[1,18],33:[1,19]},{17:[2,26]},{18:[1,66]},{16:[1,62],18:[2,33],34:67,35:61},{16:[2,35],18:[2,35],36:[1,68]},{5:[2,12],15:[2,12],18:[2,12],19:[2,12],23:[2,12],24:[2,12],29:[2,12],31:[2,12],32:[2,12],33:[2,12]},{5:[2,14],15:[2,14],18:[2,14],19:[2,14],23:[2,14],24:[2,14],29:[2,14],31:[2,14],32:[2,14],33:[2,14]},{18:[1,69]},{5:[2,32],15:[2,32],18:[2,32],19:[2,32],23:[2,32],24:[2,32],29:[2,32],31:[2,32],32:[2,32],33:[2,32]},{18:[2,34]},{29:[1,71],37:70,38:[2,37],40:[1,72]},{18:[2,24],28:[2,24]},{38:[1,73]},{38:[2,38],39:[1,74]},{38:[2,40],39:[1,75]},{16:[2,36],18:[2,36]},{29:[1,71],37:76,38:[2,37],40:[1,72]},{29:[1,71],37:77,38:[2,37],40:[1,72]},{38:[2,39]},{38:[2,41]}],
defaultActions: {21:[2,1],33:[2,20],38:[2,16],54:[2,17],57:[2,23],59:[2,26],67:[2,34],76:[2,39],77:[2,41]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  function Validator(rules) {
    this.type = 'object';
    this.name = 'root';
    this.rules = rules;
  }

  function VObject(name, rules) {
    this.type = 'object';
    this.name = name;
    this.rules = rules;
  }

  function VString(name, requirements) {
    this.type = 'string';
    this.name = name;
    this.requirements = requirements;
  }

  function VInteger(name, requirements) {
    this.type = 'integer';
    this.name = name;
    this.requirements = requirements;
  }

  function VBoolean(name, requirements) {
    this.type = 'boolean';
    this.name = name;
    this.requirements = requirements;
  }

  function VFloat(name, requirements) {
    this.type = 'float';
    this.name = name;
    this.requirements = requirements;
  }

  function VArray(name, mincount, fields) {
    this.type = 'array';
    this.name = name;
    this.mincount = mincount;
    this.fields = fields;
  }

  function VRequirement(name, arguments) {
    this.name = name;
    this.arguments = arguments;
  }

  function VConditional(condition, rules) {
    this.type = 'conditional';
    this.condition = condition;
    this.rules = rules;
  }

  function VSwitch(cases) {
    this.type = 'switch';
    this.cases = cases;
  }

  function VCase(condition, rules) {
    this.type = 'case';
    this.condition = condition;
    this.rules = rules;
  }


function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lang;
exports.Parser = lang.Parser;
exports.parse = function () { return lang.parse.apply(lang, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}